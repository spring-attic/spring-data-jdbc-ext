<?xml version="1.0" encoding="UTF-8"?>
<chapter id="orcl.connection">
  <title>Custom DataSource Connection Configurations</title>

  <section id="orcl.connection.1">
    <title>Configuration of a Proxy Authentication</title>

    <para>The Oracle JDBC implementation provides access to Oracle's Proxy
    Authentication feature. The Proxy Authentication lets you configure a
    connection pool using a proxy user account with very limited rights. Then,
    during the connection process, you would specify the actual user name for
    the end user. This user name must be configured to allow a proxy
    connection through the user proxy ("grant connect through
    proxyuser").</para>

    <para>This is valuable for web applications where you typically set up a
    data source with a shared database user. If this shared user is a proxy
    user account and you supply the actual end user name then the proxy
    authentication feature will make any database access this user performs to
    be performed with the end users actual database user account.</para>

    <para>To use this feature you must provide an implementation of the
    <classname>ConnectionUsernameProvider</classname> interface. This
    interface has a single method named <classname>getUserName</classname>
    that should return the user name for the current end user to be connected
    via the proxy user. It's up to the application developer to provide the
    appropriate implementation. One type of implementation would be to
    retrieve the current principal or user name from the
    <classname>SecurityContextHolder</classname> provided when you use Spring
    Security.</para>

    <para>An example of what this implementation could look like is:</para>

    <programlisting language="java">public class CurrentUsernameProvider implements ConnectionUsernameProvider {

    public String getUserName() {
        Object principal = 
            SecurityContextHolder.getContext().getAuthentication().getPrincipal(); 
        if (principal instanceof UserDetails) { 
            return ((UserDetails)principal).getUsername(); 
        } else { 
            return principal.toString(); 
        }
    }

}
</programlisting>

    <para>See the Spring Security reference manual for more detail regarding
    the use of the <classname>SecurityContextHolder</classname>. </para>

    <para>Connection proxy authentication is configured using the
    <classname>username-connection-proxy</classname> element. You also need to
    provide a reference to the user name provider that implements the
    <classname>ConnectionUsernameProvider</classname> interface mentioned
    above. </para>

      <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:orcl="http://www.springframework.org/schema/data/orcl"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/data/orcl
       https://www.springframework.org/schema/data/orcl/spring-data-orcl-1.0.xsd"&gt;

    <emphasis role="bold">&lt;orcl:pooling-datasource id="dataSource" 
        properties-location="classpath:orcl.properties"&gt;
        &lt;orcl:username-connection-proxy connection-context-provider="usernameProvider"/&gt; <co id="datasource.4.4.prop" />
    &lt;/orcl:pooling-datasource&gt;

    &lt;bean id="usernameProvider" 
      class="org.springframework.data.jdbc.test.CurrentUsernameProvider"/&gt;</emphasis>

&lt;/beans&gt;</programlisting>

      <calloutlist>
        <callout arearefs="datasource.4.4.prop">
          <para>The connection proxy user name provider is specified
          here.</para>
        </callout>
      </calloutlist>

    <para>To set up the database proxy user and to grant the user accounts to
    participate in the proxy authentication you could use this SQL:
    <programlisting language="sql">-- create the new proxy user account
create user proxyuser identified by proxypasswd;
grant create session to proxyuser;
-- grant existing user to connect  through the proxy
alter user spring grant connect through proxyuser;
</programlisting>In your connection properties file (orcl.properties) you
    would need to provide the proxy user credentials:<programlisting>url=jdbc:oracle:thin:@//localhost:1521/xe
username=proxyuser
password=proxypasswd</programlisting></para>

    <note>
      <para>We are currently only supporting proxy authentication using user
      name with no password authentication for the user connecting through the
      proxy. Support for other types of proxy connections will be provided in
      future releases.</para>
    </note>
  </section>

  <section id="orcl.connection.2">
    <title>Configuration of a Custom DataSource Connection Preparer</title>

    <para>There are times when you want to prepare the database connection in
    certain ways that aren't easily supported using standard connection
    properties. One example would be to set certain session properties in the
    SYS_CONTEXT like MODULE or CLIENT_IDENTIFIER. This chapter explains how to
    use a <classname>ConnectionPreparer</classname> to accomplish this. The
    example will set the CLIENT_IDENTIFIER.</para>

    <para>We will need to add a <classname>ConnectionInterceptor</classname>
    using AOP and then configure the
    <classname>ConnectionInterceptor</classname> with a
    <classname>ConnectionPreparer</classname> implementation that performs the
    necessary preparations. Lets first look at our custom
    <classname>ClientIdentifierConnectionPreparer</classname> that implements
    the <classname>ConnectionPreparer</classname> interface. There is only a
    single method named <classname>prepare</classname> that needs to be
    implemented. The prepared connection is the return value which gives you
    an opportunity to wrap the connection with a proxy class if needed.</para>

      <programlisting language="java">package org.springframework.data.jdbc.samples;

import org.springframework.data.jdbc.support.ConnectionPreparer;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;

public class ClientIdentifierConnectionPreparer implements ConnectionPreparer {

    String prepSql = "{ call DBMS_SESSION.SET_IDENTIFIER('SPRING') }"; <co id="conn.prep.sql" />

    public Connection prepare(Connection conn) throws SQLException {
        CallableStatement cs = conn.prepareCall(prepSql); <co id="conn.prep.call" />
        cs.execute();
        cs.close();
        return conn;
    }

}
</programlisting>

      <calloutlist>
        <callout arearefs="conn.prep.sql">
          <para>We define the SQL needed to set the CLIENT_IDENTIFIER
          attribute.</para>
        </callout>

        <callout arearefs="conn.prep.call">
          <para>We prepare a <classname>CallableStatement</classname> and
          execute it.</para>
        </callout>
      </calloutlist>

    <para>This example sets the CLIENT_IDENTIFIER to a fixed value, but you
    could implement a ConnectionPreparer that would use the current users
    login id. That way you can capture user login information even if your
    data source is configured with a shared user name.</para>

    <para>The following application context entries show how this could be
    configured for your data source.</para>

      <programlisting language="xml">    &lt;orcl:pooling-datasource id="dataSource" <co id="conn.prep.ac.ds" />
        connection-properties-prefix="conn"
        properties-location="classpath:orcl.properties"/&gt;

    &lt;aop:config&gt; <co id="conn.prep.ac.aop" />
        &lt;aop:advisor 
            pointcut="execution(java.sql.Connection javax.sql.DataSource.getConnection(..))" 
            advice-ref="testInterceptor"/&gt;
    &lt;/aop:config&gt;

    &lt;bean id="testInterceptor" 
          class="org.springframework.data.jdbc.aop.ConnectionInterceptor"&gt;
        &lt;property name="connectionPreparer" ref="connectionPreparer"/&gt; <co id="conn.prep.ac.int" />
    &lt;/bean&gt;

    &lt;bean id="connectionPreparer" 
        class="org.springframework.data.jdbc.samples.ClientIdentifierConnectionPreparer"/&gt; <co id="conn.prep.ac.prep" />
</programlisting>

      <calloutlist>
        <callout arearefs="conn.prep.ac.ds">
          <para>The regular dataSource definition, no extra configuration
          needed here.</para>
        </callout>

        <callout arearefs="conn.prep.ac.aop">
          <para>The AOP configuration defining the pointcut as the
          <classname>getConnection</classname> method.</para>
        </callout>

        <callout arearefs="conn.prep.ac.int">
          <para>The interceptor that has its
          <classname>connectionPreparer</classname> property set to our custom
          <classname>ClientIdentifierConnectionPreparer</classname>.</para>
        </callout>

        <callout arearefs="conn.prep.ac.ds">
          <para>A bean defining the custom
          <classname>ClientIdentifierConnectionPreparer</classname>.</para>
        </callout>
      </calloutlist>

    <para>Every time a new connection is obtained the connection preparer will
    set the CLIENT_IDENTIFIER. During database processing the value it was set
    to can be accessed using a call to a standard Oracle function -
    "<code>sys_context('USERENV', 'CLIENT_IDENTIFIER')</code>"</para>
  </section>
</chapter>