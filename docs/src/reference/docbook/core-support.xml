<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"https://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="core.support">
  <title>Support classes that extend Spring features</title>

  <para>The Spring Framework projects JDBC support is excellent but every now
  and then there are some features that seem useful, but might not warrant
  inclusion in the framework project itself. The Spring Data JDBC Extensions
  project provides a home for these type of extensions.</para>

  <section id="core.support.onetomany">
    <title>Mapping a one-to-many relationship</title>

    <para>We often have to map one-to-many relationships in our database
    projects. A customer can have many addresses, an order can contain many
    line items and so on. We are now providing a
    <classname>ResultSetExtractor</classname> implementation to deal with this
    common task.</para>

    <para>Letâ€™s look at the schema definition first:</para>

    <programlisting language="sql">CREATE TABLE customer(
  id BIGINT IDENTITY PRIMARY KEY, 
  name VARCHAR(255));
CREATE TABLE address (
  id BIGINT IDENTITY PRIMARY KEY, 
  customer_id BIGINT CONSTRAINT address_customer_ref 
    FOREIGN KEY REFERENCES customer (id), 
  street VARCHAR(255), 
  city VARCHAR(255));
</programlisting>

    <para>Two tables linked by a foreign key constraint. To map this we need
    two domain classes - <classname>Customer</classname> and
    <classname>Address</classname> where <classname>Customer</classname> has a
    Set of <classname>Addresse</classname>s.</para>

    <programlisting language="java">public class Customer {

  private Integer id;

  private String name;

  private Set&lt;Address&gt; addresses = new HashSet&lt;Address&gt;();

  public Set&lt;Address&gt; getAddresses() {
    return addresses;
  }

  public void addAddress(Address address) {
    this.addresses.add(address);
  }

// other setters and getters

}</programlisting>

    <programlisting language="java">public class Address {

  private Integer id;

  private String street;

  private String city;

// setters and getters

}</programlisting>

    <para>Executing the following query we would potentially get multiple rows
    returned for each customer. </para>

    <programlisting language="java">List&lt;Customer&gt; result = template.query(
  "select customer.id, customer.name, address.id, " +
    "address.customer_id, address.street, address.city " +
    "from customer " +
    "left join address on customer.id = address.customer_id " +
    "order by customer.id",
  resultSetExtractor);
</programlisting>

    <para>To be able to handle the multiple rows we create a new
    <classname>CustomerAddressExtractor</classname> that extends the abstract
    class <classname>OneToManyResultSetExtractor</classname>. We parameterize
    the <classname>OneToManyResultSetExtractor</classname> with the root class
    (<classname>Customer</classname>), the child class
    (<classname>Address</classname>), and the class for the primary and
    foreign key (<classname>Integer</classname>).</para>

    <programlisting language="java">public class CustomerAddressExtractor extends
    OneToManyResultSetExtractor&lt;Customer, Address, Integer&gt; {

  public CustomerAddressExtractor() {
    super(new CustomerMapper(), new AddressMapper());
  }

  @Override
  protected Integer mapPrimaryKey(ResultSet rs) throws SQLException {
    return rs.getInt("customer.id");
  }

  @Override
  protected Integer mapForeignKey(ResultSet rs) throws SQLException {
    if (rs.getObject("address.customer_id") == null) {
      return null;
    }
    else {
      return rs.getInt("address.customer_id");
    }
  }

  @Override
  protected void addChild(Customer root, Address child) {
    root.addAddress(child);
  }
}
</programlisting>

    <para>We need a way to match the primary key of the Customer with the
    foreign key of the Address so we provide mappings for these via the
    abstract methods <methodname>mapPrimaryKey</methodname> and
    <methodname>mapForeignKey</methodname>. We have to take into account that
    there might not be an address record for every customer so the foreign key
    could be <literal>null</literal>. We also need to add the mapped
    <classname>Address</classname> instances to the
    <classname>Customer</classname> instance. We do this by implementing the
    abstract method <classname>addChild</classname>. We simply call the
    <methodname>addAddress</methodname> on the <classname>Customer</classname>
    class here.</para>

    <para>Looking at the constructor of the CustomerAddressExtractor we see
    that we call the super constructor providing
    <classname>RowMapper</classname> implementations for the
    <classname>Customer</classname> and the <classname>Address</classname>
    classes. These are standard <classname>RowMapper</classname>s that we in
    this example provide as static inner classes.</para>

    <programlisting language="java">private static class CustomerMapper implements RowMapper&lt;Customer&gt; {

  public Customer mapRow(ResultSet rs, int rowNum) throws SQLException {
    Customer c = new Customer();
    c.setId(rs.getInt("customer.id"));
    c.setName(rs.getString("customer.name"));
    return c;
  }
}
</programlisting>

    <programlisting language="java">private static class AddressMapper implements RowMapper&lt;Address&gt; {

  public Address mapRow(ResultSet rs, int rowNum) throws SQLException {
    Address a = new Address();
    a.setId(rs.getInt("address.id"));
    a.setStreet(rs.getString("address.street"));
    a.setCity(rs.getString("address.city"));
    return a;
  }
}
</programlisting>

    <para>We now have a complete solution for this common problem.</para>
  </section>
</chapter>