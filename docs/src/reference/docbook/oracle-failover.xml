<?xml version="1.0" encoding="UTF-8"?>
<chapter id="orcl.failover">
  <title>Fast Connection Failover</title>

  <para>Oracle's RAC (Real Application Clusters) is an option that supports
  deployment of a single database across a cluster of servers, providing fault
  tolerance from hardware failures or other outages. Since a single database
  is served by a number of nodes, any node failure can be detected and
  subsequent operations can be directed to other nodes in the cluster. This
  support is provided by the "Fast Connection Failover" feature (FCF). When
  the failover occurs the current transaction is rolled back and a new
  transaction has to be initiated.</para>

  <para>Spring's FCF support detects the transaction failure and attempts to
  retry the entire transaction. If this retry is successful it means that the
  client of the failed application will be unaware of this failover and it
  will look like the transaction completed after a brief delay.</para>

  <para>The configuration for the FCF support is a two step configuration.
  First you need to configure a <classname>DataSource</classname> for RAC and
  second you need to configure an AOP advisor with a failover interceptor to
  handle the retries.</para>

  <section id="orcl.failover.config.datasource">
    <title>DataSource Configuration</title>

    <para>We are going to need a DataSource that is capable of participating
    in a "Fast Connection Failover" scenario. The only one we have available
    is the <classname>oracle.jdbc.pool.OracleDataSource</classname>
    implementation that we will configure using the "orcl" namespace. This
    <classname>DataSource</classname> configured with some additional
    properties used for RAC.</para>

    <para>We will be using the following property file to specify the username
    and password for the following example.</para>

    <programlisting>username=spring
password=spring</programlisting>

    <para>The url used in this example is a two node RAC configuration using
    the thin driver. It is probably too long to fit on the screen or on the
    page so if you would like to see the entire url it's listed in the callout
    notes.</para>

      <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:orcl="http://www.springframework.org/schema/data/orcl"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/data/orcl
       https://www.springframework.org/schema/data/orcl/spring-data-orcl-1.0.xsd"&gt;

    <emphasis role="bold">&lt;orcl:pooling-datasource id="racDataSource"
        url="jdbc:oracle:thin:@(description=(address_list=
            (address=(host=rac1)(protocol=tcp)(port=1521))
            (address=(host=rac2)(protocol=tcp)(port=1521)))
            (connect_data=(service_name=racdb1)))"
        properties-location="classpath:orcl.properties"
        fast-connection-failover-enabled="true" <co id="rac.1.fcf" />
        ONS-configuration="rac1:6200,rac2:6200"/&gt;</emphasis> <co id="rac.1.ons" />

    &lt;bean id="transactionManager" 
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;
        &lt;property name="dataSource" ref="racDataSource"/&gt;
    &lt;/bean&gt;

&lt;/beans&gt;</programlisting>

      <calloutlist>
        <callout arearefs="rac.1.fcf">
          <para>The fast connection failover is enabled here.</para>
        </callout>

        <callout arearefs="rac.1.ons">
          <para>The ONS (Oracle Notification Service) configuration is defined
          here since we are using the thin driver for this example.</para>
        </callout>
      </calloutlist>
  </section>

  <section id="orcl.failover.config.aop">
    <title>AOP Configuration for Fast Connection Failover Retry</title>

    <para>In order for the Fast Connection Failover to be transparent to the
    end user you need to consider the overall impact of this failover. The
    original transaction will fail and another transaction will be started to
    retry the same operation. You need to consider any non-transactional side
    effects that the failed transaction might have caused. You also need to
    consider work done while the transaction is suspended. This could happen
    if a method with a transactional attribute of "REQUIRES_NEW" is executed
    within the original transaction.</para>

    <para>Once you have considered any possible side effects, you can proceed
    to configure a RacFailoverInterceptor together with the AOP advisor and
    pointcut. The failover advisor must be before or at the same pointcut
    where the transaction advisor is applied. If the pointcuts for the
    failover advisor and the transaction advisor are at the same pointcut then
    the failover advisor must have a higher priority than the transaction
    advisor that it should wrap.</para>

    <para>For the AOP advisor configuration we use the "aop" namespace and for
    the <classname>RacFailoverInterceptor</classname> we use the
    <literal>rac-failover-interceptor</literal> tag from the "orcl"
    namespace.</para>

    <section id="orcl.failover.config.aop.advice">
      <title>Configuration when defining transactions using a
      &lt;tx:advice&gt; and an &lt;aop:advisor&gt;</title>

      <para>When using a <classname>&lt;tx:advice&gt;</classname> combined
      with an <classname>&lt;aop:advisor&gt;</classname> you simply add an
      additional <classname>&lt;aop:advisor&gt;</classname> for the RAC
      failover Interceptor referencing the
      <classname>&lt;orcl:rac-failover-interceptor&gt;</classname> element.
      You must make sure that the RAC failover interceptor comes before the
      transaction advice and you can do that by specifying the order attribute
      on the advisor for the RAC failover interceptor. Any advisor specified
      without an order automatically gets the lowest priority, so by
      specifying <classname>order="1"</classname> for the RAC failover
      interceptor we are assured this advice will come before the transaction
      advice.</para>

        <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:orcl="http://www.springframework.org/schema/data/orcl"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       https://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/data/orcl
       https://www.springframework.org/schema/data/orcl/spring-data-orcl-1.0.xsd"&gt;

    <emphasis role="bold">&lt;aop:config&gt;
        &lt;aop:advisor pointcut="execution(* *..PetStoreFacade.insertOrder(..))" <co id="fcf.1.aop.int" /> 
            advice-ref="racFailoverInterceptor" order="1"/&gt;
        &lt;aop:advisor pointcut="execution(* *..PetStoreFacade.*(..))" <co id="fcf.1.aop.tx" /> 
            advice-ref="txAdvice"/&gt;
    &lt;/aop:config&gt;</emphasis>

    <emphasis role="bold">&lt;orcl:rac-failover-interceptor id="racFailoverInterceptor"/&gt;</emphasis> <co id="fcf.1.aop.adv" />

    &lt;tx:advice id="txAdvice"&gt;
        &lt;tx:attributes&gt;
            &lt;tx:method name="insert*"/&gt;
            &lt;tx:method name="update*"/&gt;
            &lt;tx:method name="*" read-only="true"/&gt;
        &lt;/tx:attributes&gt;
    &lt;/tx:advice&gt;

&lt;/beans&gt;</programlisting>

        <calloutlist>
          <callout arearefs="fcf.1.aop.int">
            <para>The advisor defined for the RAC failover interceptor. This
            must have a higher order than the transaction advisor. We do use
            the same pointcut</para>
          </callout>

          <callout arearefs="fcf.1.aop.tx">
            <para>The standard transaction advice defined here.</para>
          </callout>

          <callout arearefs="fcf.1.aop.adv">
            <para>The RAC failover interceptor is defined using the
            <classname>rac-failover-interceptor</classname> element of the
            "orcl" namespace.</para>
          </callout>
        </calloutlist>
    </section>

    <section id="orcl.failover.config.aop.annotation">
      <title>Configuration when defining transactions using @Transactional
      annotation</title>

      <para>When using a &lt;tx:annotation-driven&gt; configuration you add
      <classname>&lt;aop:config&gt;</classname> entry with an
      <classname>&lt;aop:advisor&gt;</classname> element for the RAC failover
      Interceptor referencing the
      <classname>&lt;orcl:rac-failover-interceptor&gt;</classname> element.
      You must make sure that the RAC failover interceptor comes before the
      transaction advice and you can do that by specifying the order attribute
      on the advisor for the RAC failover interceptor. Any
      &lt;tx:annotation-driven&gt; specified without an order automatically
      gets the lowest priority, so by specifying
      <classname>order="1"</classname> for the RAC failover interceptor we are
      assured this advice will come before the transaction advice.</para>

        <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:orcl="http://www.springframework.org/schema/data/orcl"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       https://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/data/orcl
       https://www.springframework.org/schema/data/orcl/spring-data-orcl-1.0.xsd"&gt;

    <emphasis role="bold">&lt;aop:config&gt;
        &lt;aop:advisor <co id="fcf.2.aop.adv" />
            pointcut="@annotation(org.springframework.transaction.annotation.Transactional)" 
            advice-ref="racFailoverInterceptor" order="1"/&gt;
    &lt;/aop:config&gt;</emphasis>

    <emphasis role="bold">&lt;orcl:rac-failover-interceptor id="racFailoverInterceptor"/&gt;</emphasis> <co id="fcf.2.aop.int" />

    &lt;tx:annotation-driven/&gt; <co id="fcf.2.aop.anno" />

&lt;/beans&gt;</programlisting>

        <calloutlist>
          <callout arearefs="fcf.1.aop.adv">
            <para>The advisor defined for the RAC failover interceptor. This
            must have a higher order than the transaction advisor. We use an
            <classname>@annotation</classname> pointcut referencing the
            <classname>@Transactional</classname> annotation.</para>
          </callout>

          <callout arearefs="fcf.1.aop.int">
            <para>The RAC failover interceptor is defined using the
            <classname>rac-failover-interceptor</classname> element of the
            "orcl" namespace.</para>
          </callout>

          <callout arearefs="fcf.1.aop.anno">
            <para>The standard transaction annotation-driven element defined
            here.</para>
          </callout>
        </calloutlist>
    </section>
  </section>

  <section id="orcl.failover.config.interceptor">
    <title>Configuration options for &lt;rac-failover-interceptor&gt;</title>

    <para>There is a number of optional attributes you can use to configure
    the <literal>rac-failover-interceptor</literal>.</para>

    <table id="failover-settings">
      <title><literal>&lt;rac-failover-interceptor&gt;</literal> attribute
      settings</title>

      <tgroup cols="4">
        <colspec colnum="1" colwidth="1*" />

        <colspec colnum="2" colwidth="0.5*" />

        <colspec colnum="3" colwidth="0.8*" />

        <colspec colnum="4" colwidth="1.5*" />

        <thead>
          <row>
            <entry>Attribute</entry>

            <entry>Required</entry>

            <entry>Default</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><literal>recoverable-error-codes</literal></entry>

            <entry>No</entry>

            <entry>3113, 3114, 1033, 1034, 1089, 17002, 17008, 17410</entry>

            <entry>A comma separated list of integer error codes that will be
            used instead of the default set.</entry>
          </row>

          <row>
            <entry><literal>max-number-of-retries</literal></entry>

            <entry>No</entry>

            <entry>5</entry>

            <entry>The maximum number of times the retry will be
            performed.</entry>
          </row>

          <row>
            <entry><literal>back-off-policy</literal></entry>

            <entry>No</entry>

            <entry><classname>NoBackOffPolicy</classname></entry>

            <entry>A specific back off policy to be used. This is a reference
            to a bean that implements <classname>BackOffPolicy
            *</classname></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>*
    <classname>org.springframework.batch.retry.backoff.BackOffPolicy</classname></para>
  </section>
</chapter>